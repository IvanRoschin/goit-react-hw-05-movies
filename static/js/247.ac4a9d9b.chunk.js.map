{"version":3,"file":"static/js/247.ac4a9d9b.chunk.js","mappings":"4PA+DA,UAlDa,WACX,OAA4BA,EAAAA,EAAAA,UAASC,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwBH,EAAAA,EAAAA,UAAS,IAAjC,eAAOI,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WAAM,wCAGd,2FACEL,EAAUF,EAAAA,EAAAA,SADZ,mBAIwBQ,EAAAA,EAAAA,IAAaH,GAJrC,OAIUI,EAJV,OAKIL,EAAQK,GACRP,EAAUF,EAAAA,EAAAA,UANd,gDAQIE,EAAUF,EAAAA,EAAAA,UACVU,QAAQC,IAAR,MATJ,0DAHc,sBACTN,GADS,mCAedO,EACD,GAAE,CAACP,EAASF,EAAKU,UAGhB,gCACc,YAAXZ,EACW,aAAXA,IACC,SAAC,KAAD,UACGE,EAAKW,KAAI,YAA0C,IAAvCC,EAAsC,EAAtCA,GAAIC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAC9B,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,IACmB,OAAjBD,EAAA,UACOE,EAAAA,GADP,YAC0BC,EAAAA,GAD1B,YACsCH,GAClC,wFAENI,IAAKL,KAEP,SAAC,KAAD,UAAWA,MATED,EAYlB,MAGO,aAAXd,IAAyB,SAAC,KAAD,uCAG/B,C,yLC3DYqB,EAAgBC,EAAAA,GAAAA,GAAH,0KAUbC,EAAWD,EAAAA,GAAAA,GAAH,gDAIRE,EAAaF,EAAAA,GAAAA,IAAH,8IAOVG,EAAWH,EAAAA,GAAAA,EAAH,yFAMRI,EAAUJ,EAAAA,GAAAA,IAAH,mI,4MC3BpB,EAFgB,mC,UCKhBK,IAAAA,SAAAA,QAAyBC,EAAAA,GAGlB,IAAMC,EAAW,mCAAG,yGAAOC,EAAP,+BAAc,EAAd,SACFH,IAAAA,IAAA,sCACUI,EADV,iBAC0BD,IAFxB,cACnBE,EADmB,yBAIlBA,EAASC,MAJS,2CAAH,qDAQXC,EAAW,mCAAG,WAAMpB,GAAN,yFACFa,IAAAA,IAAA,iBAAoBb,EAApB,oBAAkCiB,IADhC,uBACjBE,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAMXE,EAAc,mCAAG,WAAOC,EAAON,GAAd,yFACLH,IAAAA,IAAA,gCACII,EADJ,iCACoCK,EADpC,iBACkDN,IAF7C,mBAID,KAHnBG,EADoB,EACpBA,MAGCI,cAJmB,yCAKnBC,QAAQC,OAAO,IAAIC,MAAJ,gCAAmCJ,MAL/B,gCAOnBH,GAPmB,2CAAH,wDAYd1B,EAAY,mCAAG,WAAMO,GAAN,uFACHa,IAAAA,IAAA,iBAAoBb,EAApB,4BAA0CiB,IADvC,UAEQ,KAD5BC,EADoB,QAEbC,KAAK/B,KAAKU,OAFG,yCAGjB0B,QAAQC,OAAO,IAAIC,MAAJ,wBAHE,gCAKjBR,EAASC,KAAK/B,MALG,2CAAH,sDAUZuC,EAAe,mCAAG,WAAM3B,GAAN,uFACNa,IAAAA,IAAA,iBAAoBb,EAApB,4BAA0CiB,IADpC,UAEO,KAD9BC,EADuB,QAEhBC,KAAKI,cAFW,yCAGpBC,QAAQC,OAAO,IAAIC,MAAJ,2BAHK,gCAKpBR,EAASC,KAAKS,SALM,2CAAH,qD,wJC5C5B,IAAMd,EAA2B,+BAI3BV,EAAkB,6BAIXyB,EAAQ,QAERC,EAAQ,QACRzB,EAAQ,O,sDCXd,IAAMpB,EAAS,CACpB8C,KAAM,OACNC,QAAS,UACTC,SAAU,WACVC,SAAU,W","sources":["components/Cast/Cast.jsx","components/Cast/Cast.styled.jsx","components/api/constants/apiKeys.js","components/api/api.jsx","components/api/constants/baseUrls.js","components/api/constants/status.jsx"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieCast } from '../api/api';\nimport { Status } from '../api/constants/status';\nimport { BASE_POSTER_URL, IMG_W200 } from 'components/api/constants/baseUrls';\nimport {\n  CastContainer,\n  CastItem,\n  CastPoster,\n  CastName,\n  Message,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const [status, setStatus] = useState(Status.IDLE);\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    async function getCast() {\n      setStatus(Status.PENDING);\n\n      try {\n        const casts = await getMovieCast(movieId);\n        setCast(casts);\n        setStatus(Status.RESOLVED);\n      } catch (error) {\n        setStatus(Status.REJECTED);\n        console.log(error);\n      }\n    }\n    getCast();\n  }, [movieId, cast.length]);\n\n  return (\n    <>\n      {status === 'pending'}\n      {status === 'resolved' && (\n        <CastContainer>\n          {cast.map(({ id, original_name, profile_path }) => {\n            return (\n              <CastItem key={id}>\n                <CastPoster\n                  src={\n                    profile_path !== null\n                      ? `${BASE_POSTER_URL}/${IMG_W200}/${profile_path}`\n                      : 'https://thesource.sa.ua.edu/wp-content/uploads/sites/57/2019/08/no-person-200x300.png'\n                  }\n                  alt={original_name}\n                />\n                <CastName>{original_name}</CastName>\n              </CastItem>\n            );\n          })}\n        </CastContainer>\n      )}\n      {status === 'rejected' && <Message>Sorry! Casts not found</Message>}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const CastContainer = styled.ul`\n  margin-top: 16px;\n  margin-bottom: 16px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  justify-content: center;\n  list-style: none;\n`;\n\nexport const CastItem = styled.li`\n  margin-bottom: 16px;\n`;\n\nexport const CastPoster = styled.img`\n  box-shadow: 0px 3px 4px 1px rgba(44, 133, 200, 0.2);\n  max-width: 200px;\n  height: 300px;\n  margin-bottom: 6px;\n`;\n\nexport const CastName = styled.p`\n  font-weight: 500;\n  text-align: center;\n  max-width: 200px;\n`;\n\nexport const Message = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 16px;\n  font-size: 16px;\n  font-weight: 700;\n`;\n","const API_KEY = '7b857fa55c7b70b9ad8d603bfe522c1c';\n\nexport default API_KEY;\n","import axios from 'axios';\n\nimport API_KEY from './constants/apiKeys';\nimport { BASE_TRENDING_MOVIES_URL } from './constants/baseUrls';\n\naxios.defaults.baseURL = BASE_TRENDING_MOVIES_URL;\n\n// FETCH FILMS FOR THE FIRST TIME\nexport const getTrending = async (page = 1) => {\n  const response = await axios.get(\n    `/trending/movie/day?api_key=${API_KEY}&page=${page}`\n  );\n  return response.data;\n};\n\n// FETCH FILMS BY ID\nexport const getFilmById = async id => {\n  const { data } = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return data;\n};\n\n// FETCH FILMS USING FORM\nexport const getSearchMovie = async (query, page) => {\n  const { data } = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=${page}`\n  );\n  if (data.total_results === 0) {\n    return Promise.reject(new Error(`Ooops! No images with ${query}`));\n  } else {\n    return data;\n  }\n};\n\n// FETCH CAST\nexport const getMovieCast = async id => {\n  const response = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  if (response.data.cast.length === 0) {\n    return Promise.reject(new Error(`No cast was found.`));\n  } else {\n    return response.data.cast;\n  }\n};\n\n// FETCH REVIEWS\nexport const getMovieReviews = async id => {\n  const response = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n  if (response.data.total_results === 0) {\n    return Promise.reject(new Error(`No reviews was found.`));\n  } else {\n    return response.data.results;\n  }\n};\n","const BASE_TRENDING_MOVIES_URL = 'https://api.themoviedb.org/3';\n\nconst BASE_GENRE_URL = 'https://api.themoviedb.org/3/genre/movie/list?';\n\nconst BASE_POSTER_URL = 'https://image.tmdb.org/t/p';\n\nexport { BASE_TRENDING_MOVIES_URL, BASE_POSTER_URL, BASE_GENRE_URL };\n\nexport const IMG_W500 = `/w500`;\nexport const IMG_W400 = `/w400`;\nexport const IMG_W300 = `/w300`;\nexport const IMG_W200 = `/w200`;\nexport const IMG_W100 = `/w100`;\nexport const IMG_ORIG = `/original`;\n","export const Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n"],"names":["useState","Status","status","setStatus","cast","setCast","movieId","useParams","useEffect","getMovieCast","casts","console","log","getCast","length","map","id","original_name","profile_path","src","BASE_POSTER_URL","IMG_W200","alt","CastContainer","styled","CastItem","CastPoster","CastName","Message","axios","BASE_TRENDING_MOVIES_URL","getTrending","page","API_KEY","response","data","getFilmById","getSearchMovie","query","total_results","Promise","reject","Error","getMovieReviews","results","IMG_W500","IMG_W300","IDLE","PENDING","RESOLVED","REJECTED"],"sourceRoot":""}