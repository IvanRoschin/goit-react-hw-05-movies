{"version":3,"file":"static/js/387.d156358c.chunk.js","mappings":"ySAEaA,EAAgBC,EAAAA,GAAAA,GAAH,0KAUbC,EAAWD,EAAAA,GAAAA,GAAH,gDAIRE,EAAaF,EAAAA,GAAAA,IAAH,8IAOVG,EAAWH,EAAAA,GAAAA,EAAH,yFAMRI,EAAUJ,EAAAA,GAAAA,IAAH,mI,gKC3BPK,E,QAAmBL,GAAAA,GAAH,iL,mBCgD7B,EA3CgB,WACd,OAA4BM,EAAAA,EAAAA,UAASC,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BH,EAAAA,EAAAA,UAAS,IAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WAAM,wCAGd,2FACEL,EAAUF,EAAAA,EAAAA,SADZ,mBAIuBQ,EAAAA,EAAAA,IAAgBH,GAJvC,OAIUI,EAJV,OAKIL,EAAWK,GACXP,EAAUF,EAAAA,EAAAA,UANd,gDAQIE,EAAUF,EAAAA,EAAAA,UACVU,QAAQC,IAAR,MATJ,0DAHc,sBACTN,GADS,mCAedO,EACD,GAAE,CAACP,KAGF,gCACc,YAAXJ,EACW,aAAXA,IACC,SAACH,EAAD,UACGK,EAAQU,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,2BACE,wBAAKD,KACL,6BAAKC,EAAL,SAFOF,EAKZ,MAGO,aAAXb,IAAyB,SAAC,KAAD,yCAG/B,C,4MC9CD,EAFgB,mC,UCKhBgB,IAAAA,SAAAA,QAAyBC,EAAAA,GAGlB,IAAMC,EAAW,mCAAG,yGAAOC,EAAP,+BAAc,EAAd,SACFH,IAAAA,IAAA,sCACUI,EADV,iBAC0BD,IAFxB,cACnBE,EADmB,yBAIlBA,EAASb,MAJS,2CAAH,qDAQXc,EAAW,mCAAG,WAAMT,GAAN,yFACFG,IAAAA,IAAA,iBAAoBH,EAApB,oBAAkCO,IADhC,uBACjBZ,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAMXe,EAAc,mCAAG,WAAMC,GAAN,yFACLR,IAAAA,IAAA,gCACII,EADJ,iCACoCI,IAF/B,mBAID,KAHnBhB,EADoB,EACpBA,MAGCiB,cAJmB,yCAKnBC,QAAQC,OAAO,IAAIC,MAAJ,gCAAmCJ,MAL/B,gCAOnBhB,GAPmB,2CAAH,sDAYdqB,EAAY,mCAAG,WAAMhB,GAAN,uFACHG,IAAAA,IAAA,iBAAoBH,EAApB,4BAA0CO,IADvC,UAEQ,KAD5BC,EADoB,QAEbb,KAAKsB,KAAKC,OAFG,yCAGjBL,QAAQC,OAAO,IAAIC,MAAJ,wBAHE,gCAKjBP,EAASb,KAAKsB,MALG,2CAAH,sDAUZvB,EAAe,mCAAG,WAAMM,GAAN,uFACNG,IAAAA,IAAA,iBAAoBH,EAApB,4BAA0CO,IADpC,UAEO,KAD9BC,EADuB,QAEhBb,KAAKiB,cAFW,yCAGpBC,QAAQC,OAAO,IAAIC,MAAJ,2BAHK,gCAKpBP,EAASb,KAAKwB,SALM,2CAAH,qD,wJC5C5B,IAAMf,EAA2B,+BAI3BgB,EAAkB,6BAIXC,EAAQ,QAERC,EAAQ,QACRC,EAAQ,O,sDCXd,IAAMrC,EAAS,CACpBsC,KAAM,OACNC,QAAS,UACTC,SAAU,WACVC,SAAU,W","sources":["components/Cast/Cast.styled.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","components/api/constants/apiKeys.js","components/api/api.jsx","components/api/constants/baseUrls.js","components/api/constants/status.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastContainer = styled.ul`\n  margin-top: 16px;\n  margin-bottom: 16px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  justify-content: center;\n  list-style: none;\n`;\n\nexport const CastItem = styled.li`\n  margin-bottom: 16px;\n`;\n\nexport const CastPoster = styled.img`\n  box-shadow: 0px 3px 4px 1px rgba(44, 133, 200, 0.2);\n  max-width: 200px;\n  height: 300px;\n  margin-bottom: 6px;\n`;\n\nexport const CastName = styled.p`\n  font-weight: 500;\n  text-align: center;\n  max-width: 200px;\n`;\n\nexport const Message = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 16px;\n  font-size: 16px;\n  font-weight: 700;\n`;\n","import styled from 'styled-components';\n\nexport const ReviewsContainer = styled.ul`\n  margin-top: 16px;\n  margin-bottom: 16px;\n  justify-content: center;\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieReviews } from '../api/api';\nimport { Status } from '../api/constants/status';\nimport { ReviewsContainer } from './Reviews.styled';\nimport { Message } from '../Cast/Cast.styled';\n\nconst Reviews = () => {\n  const [status, setStatus] = useState(Status.IDLE);\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    async function getReviews() {\n      setStatus(Status.PENDING);\n\n      try {\n        const data = await getMovieReviews(movieId);\n        setReviews(data);\n        setStatus(Status.RESOLVED);\n      } catch (error) {\n        setStatus(Status.REJECTED);\n        console.log(error);\n      }\n    }\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {status === 'pending'}\n      {status === 'resolved' && (\n        <ReviewsContainer>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <h2>{author}</h2>\n                <p>`{content}`</p>\n              </li>\n            );\n          })}\n        </ReviewsContainer>\n      )}\n      {status === 'rejected' && <Message>Sorry! Reviews not found</Message>}\n    </>\n  );\n};\n\nexport default Reviews;\n","const API_KEY = '7b857fa55c7b70b9ad8d603bfe522c1c';\n\nexport default API_KEY;\n","import axios from 'axios';\n\nimport API_KEY from './constants/apiKeys';\nimport { BASE_TRENDING_MOVIES_URL } from './constants/baseUrls';\n\naxios.defaults.baseURL = BASE_TRENDING_MOVIES_URL;\n\n// FETCH FILMS FOR THE FIRST TIME\nexport const getTrending = async (page = 1) => {\n  const response = await axios.get(\n    `/trending/movie/day?api_key=${API_KEY}&page=${page}`\n  );\n  return response.data;\n};\n\n// FETCH FILMS BY ID\nexport const getFilmById = async id => {\n  const { data } = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return data;\n};\n\n// FETCH FILMS USING FORM\nexport const getSearchMovie = async query => {\n  const { data } = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&query=${query}`\n  );\n  if (data.total_results === 0) {\n    return Promise.reject(new Error(`Ooops! No images with ${query}`));\n  } else {\n    return data;\n  }\n};\n\n// FETCH CAST\nexport const getMovieCast = async id => {\n  const response = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  if (response.data.cast.length === 0) {\n    return Promise.reject(new Error(`No cast was found.`));\n  } else {\n    return response.data.cast;\n  }\n};\n\n// FETCH REVIEWS\nexport const getMovieReviews = async id => {\n  const response = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n  if (response.data.total_results === 0) {\n    return Promise.reject(new Error(`No reviews was found.`));\n  } else {\n    return response.data.results;\n  }\n};\n","const BASE_TRENDING_MOVIES_URL = 'https://api.themoviedb.org/3';\n\nconst BASE_GENRE_URL = 'https://api.themoviedb.org/3/genre/movie/list?';\n\nconst BASE_POSTER_URL = 'https://image.tmdb.org/t/p';\n\nexport { BASE_TRENDING_MOVIES_URL, BASE_POSTER_URL, BASE_GENRE_URL };\n\nexport const IMG_W500 = `/w500`;\nexport const IMG_W400 = `/w400`;\nexport const IMG_W300 = `/w300`;\nexport const IMG_W200 = `/w200`;\nexport const IMG_W100 = `/w100`;\nexport const IMG_ORIG = `/original`;\n","export const Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n"],"names":["CastContainer","styled","CastItem","CastPoster","CastName","Message","ReviewsContainer","useState","Status","status","setStatus","reviews","setReviews","movieId","useParams","useEffect","getMovieReviews","data","console","log","getReviews","map","id","author","content","axios","BASE_TRENDING_MOVIES_URL","getTrending","page","API_KEY","response","getFilmById","getSearchMovie","query","total_results","Promise","reject","Error","getMovieCast","cast","length","results","BASE_POSTER_URL","IMG_W500","IMG_W300","IMG_W200","IDLE","PENDING","RESOLVED","REJECTED"],"sourceRoot":""}